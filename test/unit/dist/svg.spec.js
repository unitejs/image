"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for SVG.
 */
const Chai = require("chai");
const Sinon = require("sinon");
const defaultLogger_1 = require("unitejs-framework/dist/loggers/defaultLogger");
const svg_1 = require("../../../dist/svg");
const fileSystem_mock_1 = require("./fileSystem.mock");
describe("SVG", () => {
    let sandbox;
    let loggerStub;
    let fileSystemStub;
    let defaultLoggerStub;
    let loggerErrorSpy;
    beforeEach(() => {
        sandbox = Sinon.sandbox.create();
        loggerStub = {};
        loggerStub.banner = () => { };
        loggerStub.info = () => { };
        loggerStub.warning = () => { };
        loggerStub.error = () => { };
        fileSystemStub = new fileSystem_mock_1.FileSystemMock();
        loggerErrorSpy = sandbox.spy(loggerStub, "error");
        defaultLoggerStub = sandbox.stub(defaultLogger_1.DefaultLogger, "log");
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
        yield fileSystemStub.directoryDelete("./test/unit/temp");
    }));
    it("can be created", () => {
        const obj = new svg_1.SVG();
        Chai.should().exist(obj);
    });
    describe("toPng", () => {
        it("can return error with no logger", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toPng(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(defaultLoggerStub.args[0][0]).to.contain("logger");
        }));
        it("can return error with no file system", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toPng(loggerStub, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("file system");
        }));
        it("can return error with no sourceFolder", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toPng(loggerStub, fileSystemStub, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("sourceFolder");
        }));
        it("can return error with no sourceFile", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toPng(loggerStub, fileSystemStub, "./test/unit/assets", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("sourceFile");
        }));
        it("can return error with no destFolder", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toPng(loggerStub, fileSystemStub, "./test/unit/assets", "test.svg", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("destFolder");
        }));
        it("can return error with no destFile", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toPng(loggerStub, fileSystemStub, "./test/unit/assets", "test.svg", "./test/unit/temp", undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("destFile");
        }));
        it("can return error with no width", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toPng(loggerStub, fileSystemStub, "./test/unit/assets", "test.svg", "./test/unit/temp", "test.png", undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("width");
        }));
        it("can return error with zero width", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toPng(loggerStub, fileSystemStub, "./test/unit/assets", "test.svg", "./test/unit/temp", "test.png", 0, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("width");
        }));
        it("can return error with no height", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toPng(loggerStub, fileSystemStub, "./test/unit/assets", "test.svg", "./test/unit/temp", "test.png", 100, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("height");
        }));
        it("can return error with zero height", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toPng(loggerStub, fileSystemStub, "./test/unit/assets", "test.svg", "./test/unit/temp", "test.png", 100, 0, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("height");
        }));
        it("can return error with invalid background", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toPng(loggerStub, fileSystemStub, "./test/unit/assets", "test.svg", "./test/unit/temp", "test.png", 100, 100, undefined, undefined, "#A");
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("background");
        }));
        it("can return error if source file does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toPng(loggerStub, fileSystemStub, "./test/unit/assets", "missing.svg", "./test/unit/temp", "test.png", 100, 100, 10, 10, "#AAA");
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("does not exist");
        }));
        it("can succeed if source file exists with no background", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toPng(loggerStub, fileSystemStub, "./test/unit/assets", "test.svg", "./test/unit/temp", "test.png", 100, 100, 10, 10, undefined);
            Chai.expect(res).to.be.equal(0);
            const exists = yield fileSystemStub.fileExists("./test/unit/temp", "test.png");
            Chai.expect(exists).to.be.equal(true);
        }));
        it("can succeed if source file exists with background", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toPng(loggerStub, fileSystemStub, "./test/unit/assets", "test.svg", "./test/unit/temp", "test.png", 100, 100, 10, 10, "#F00");
            Chai.expect(res).to.be.equal(0);
            const exists = yield fileSystemStub.fileExists("./test/unit/temp", "test.png");
            Chai.expect(exists).to.be.equal(true);
        }));
        it("can succeed if dest directory exists", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            yield fileSystemStub.directoryCreate("./test/unit/temp");
            const res = yield obj.toPng(loggerStub, fileSystemStub, "./test/unit/assets", "test.svg", "./test/unit/temp", "test.png", 100, 100, 10, 10, "#F00");
            Chai.expect(res).to.be.equal(0);
            const exists = yield fileSystemStub.fileExists("./test/unit/temp", "test.png");
            Chai.expect(exists).to.be.equal(true);
        }));
        it("can throw error if conversion fails", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const stub = sandbox.stub(fileSystemStub, "fileExists");
            stub.throws("kaboom");
            const res = yield obj.toPng(loggerStub, fileSystemStub, "./test/unit/assets", "test.svg", "./test/unit/temp", "test.png", 100, 100, 10, 10, "#F00");
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("failed");
        }));
    });
    describe("toMask", () => {
        it("can return error with no logger", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toMask(undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(defaultLoggerStub.args[0][0]).to.contain("logger");
        }));
        it("can return error with no file system", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toMask(loggerStub, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("file system");
        }));
        it("can return error with no sourceFolder", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toMask(loggerStub, fileSystemStub, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("sourceFolder");
        }));
        it("can return error with no sourceFile", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toMask(loggerStub, fileSystemStub, "./test/unit/assets", undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("sourceFile");
        }));
        it("can return error with no destFolder", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toMask(loggerStub, fileSystemStub, "./test/unit/assets", "test.svg", undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("destFolder");
        }));
        it("can return error with no destFile", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toMask(loggerStub, fileSystemStub, "./test/unit/assets", "test.svg", "./test/unit/temp", undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("destFile");
        }));
        it("can return error if source file does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toMask(loggerStub, fileSystemStub, "./test/unit/assets", "missing.svg", "./test/unit/temp", "mask.svg");
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("does not exist");
        }));
        it("can succeed if source file exists", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const res = yield obj.toMask(loggerStub, fileSystemStub, "./test/unit/assets", "test.svg", "./test/unit/temp", "mask.svg");
            Chai.expect(res).to.be.equal(0);
            const exists = yield fileSystemStub.fileExists("./test/unit/temp", "mask.svg");
            Chai.expect(exists).to.be.equal(true);
            if (exists) {
                const content = yield fileSystemStub.fileReadText("./test/unit/temp", "mask.svg");
                Chai.expect(content).not.to.contain("fill=\"rgb(255,255,255)\"");
            }
        }));
        it("can succeed if dest directory exists", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            yield fileSystemStub.directoryCreate("./test/unit/temp");
            const res = yield obj.toMask(loggerStub, fileSystemStub, "./test/unit/assets", "test.svg", "./test/unit/temp", "mask.svg");
            Chai.expect(res).to.be.equal(0);
            const exists = yield fileSystemStub.fileExists("./test/unit/temp", "mask.svg");
            Chai.expect(exists).to.be.equal(true);
            if (exists) {
                const content = yield fileSystemStub.fileReadText("./test/unit/temp", "mask.svg");
                Chai.expect(content).not.to.contain("fill=\"rgb(255,255,255)\"");
            }
        }));
        it("can throw error if conversion fails", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new svg_1.SVG();
            const stub = sandbox.stub(fileSystemStub, "fileExists");
            stub.throws("kaboom");
            const res = yield obj.toMask(loggerStub, fileSystemStub, "./test/unit/assets", "test.svg", "./test/unit/temp", "mask.svg");
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("failed");
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,

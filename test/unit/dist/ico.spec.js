"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for ICO.
 */
const Chai = require("chai");
const Sinon = require("sinon");
const defaultLogger_1 = require("unitejs-framework/dist/loggers/defaultLogger");
const ico_1 = require("../../../dist/ico");
const fileSystem_mock_1 = require("./fileSystem.mock");
describe("ICO", () => {
    let sandbox;
    let loggerStub;
    let fileSystemStub;
    let defaultLoggerStub;
    let loggerErrorSpy;
    beforeEach(() => {
        sandbox = Sinon.sandbox.create();
        loggerStub = {};
        loggerStub.banner = () => { };
        loggerStub.info = () => { };
        loggerStub.warning = () => { };
        loggerStub.error = () => { };
        fileSystemStub = new fileSystem_mock_1.FileSystemMock();
        loggerErrorSpy = sandbox.spy(loggerStub, "error");
        defaultLoggerStub = sandbox.stub(defaultLogger_1.DefaultLogger, "log");
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
        yield fileSystemStub.directoryDelete("./test/unit/temp");
    }));
    it("can be created", () => {
        const obj = new ico_1.ICO();
        Chai.should().exist(obj);
    });
    describe("fromPngs", () => {
        it("can return error with no logger", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new ico_1.ICO();
            const res = yield obj.fromPngs(undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(defaultLoggerStub.args[0][0]).to.contain("logger");
        }));
        it("can return error with no file system", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new ico_1.ICO();
            const res = yield obj.fromPngs(loggerStub, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("file system");
        }));
        it("can return error with no sourceFolder", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new ico_1.ICO();
            const res = yield obj.fromPngs(loggerStub, fileSystemStub, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("sourceFolder");
        }));
        it("can return error with no sourceFiles supplied", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new ico_1.ICO();
            const res = yield obj.fromPngs(loggerStub, fileSystemStub, "./test/unit/assets", undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("sourceFiles");
        }));
        it("can return error with no sourceFiles", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new ico_1.ICO();
            const res = yield obj.fromPngs(loggerStub, fileSystemStub, "./test/unit/assets", [], undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("sourceFiles");
        }));
        it("can return error with no destFolder", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new ico_1.ICO();
            const res = yield obj.fromPngs(loggerStub, fileSystemStub, "./test/unit/assets", ["favicon-16x16.png", "favicon-32x32.png"], undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("destFolder");
        }));
        it("can return error with no destFile", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new ico_1.ICO();
            const res = yield obj.fromPngs(loggerStub, fileSystemStub, "./test/unit/assets", ["favicon-16x16.png", "favicon-32x32.png"], "./test/unit/temp", undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("destFile");
        }));
        it("can return error when source file does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new ico_1.ICO();
            const res = yield obj.fromPngs(loggerStub, fileSystemStub, "./test/unit/assets", ["favicon-1x1.png"], "./test/unit/temp", "test.ico");
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("does not exist");
        }));
        it("can return error when source file is zero length", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new ico_1.ICO();
            const res = yield obj.fromPngs(loggerStub, fileSystemStub, "./test/unit/assets", ["favicon-0x0.png"], "./test/unit/temp", "test.ico");
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("is zero length");
        }));
        it("can succeed when dest directory does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new ico_1.ICO();
            const res = yield obj.fromPngs(loggerStub, fileSystemStub, "./test/unit/assets", ["favicon-16x16.png", "favicon-32x32.png"], "./test/unit/temp", "test.ico");
            Chai.expect(res).to.be.equal(0);
            const exists = yield fileSystemStub.fileExists("./test/unit/temp", "test.ico");
            Chai.expect(exists).to.be.equal(true);
        }));
        it("can succeed when dest directory does exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new ico_1.ICO();
            yield fileSystemStub.directoryCreate("./test/unit/temp");
            const res = yield obj.fromPngs(loggerStub, fileSystemStub, "./test/unit/assets", ["favicon-16x16.png", "favicon-32x32.png"], "./test/unit/temp", "test.ico");
            Chai.expect(res).to.be.equal(0);
            const exists = yield fileSystemStub.fileExists("./test/unit/temp", "test.ico");
            Chai.expect(exists).to.be.equal(true);
        }));
        it("can succeed with large image", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new ico_1.ICO();
            yield fileSystemStub.directoryCreate("./test/unit/temp");
            const res = yield obj.fromPngs(loggerStub, fileSystemStub, "./test/unit/assets", ["test1024.png", "favicon-32x32.png"], "./test/unit/temp", "test.ico");
            Chai.expect(res).to.be.equal(0);
            const exists = yield fileSystemStub.fileExists("./test/unit/temp", "test.ico");
            Chai.expect(exists).to.be.equal(true);
        }));
        it("can throw error if conversion fails", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new ico_1.ICO();
            const stub = sandbox.stub(fileSystemStub, "fileReadBinary");
            stub.throws("kaboom");
            const res = yield obj.fromPngs(loggerStub, fileSystemStub, "./test/unit/assets", ["favicon-16x16.png", "favicon-32x32.png"], "./test/unit/temp", "test.ico");
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("failed");
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * ICNS class for manipulating apple icns images.
 */
const Jimp = require("jimp");
const parameterValidation_1 = require("unitejs-framework/dist/helpers/parameterValidation");
class ICNS {
    fromPng(logger, fileSystem, sourceFolder, sourceFile, destFolder, destFile) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!parameterValidation_1.ParameterValidation.notEmpty(logger, "sourceFolder", sourceFolder)) {
                    return 1;
                }
                if (!parameterValidation_1.ParameterValidation.notEmpty(logger, "sourceFile", sourceFile)) {
                    return 1;
                }
                if (!parameterValidation_1.ParameterValidation.notEmpty(logger, "destFolder", destFolder)) {
                    return 1;
                }
                if (!parameterValidation_1.ParameterValidation.notEmpty(logger, "destFile", destFile)) {
                    return 1;
                }
                const sourceImage = fileSystem.pathCombine(sourceFolder, sourceFile);
                logger.info("Reading Source PNG", [sourceImage]);
                const pngImageData = yield Jimp.read(sourceImage);
                const icnsData = yield this.imageToIcns(logger, pngImageData);
                logger.info("Writing ICNS ", [fileSystem.pathCombine(destFolder, destFile)]);
                yield fileSystem.fileWriteBinary(destFolder, destFile, icnsData);
                return 0;
            }
            catch (e) {
                logger.error("Conversion failed", e);
                return 1;
            }
        });
    }
    imageToIcns(logger, sourceImage) {
        return __awaiter(this, void 0, void 0, function* () {
            // https://en.wikipedia.org/wiki/Apple_Icon_Image_format
            // We only support the new image formats the use embedded png
            const icnsImages = [
                { type: "icp4", size: 16, info: "16" },
                { type: "icp5", size: 32, info: "32x32" },
                { type: "icp6", size: 64, info: "64x64" },
                { type: "ic07", size: 128, info: "128x128" },
                { type: "ic08", size: 256, info: "256x256" },
                { type: "ic09", size: 512, info: "512x512" },
                { type: "ic10", size: 1024, info: "512x512@2" },
                { type: "ic11", size: 32, info: "16x16@2" },
                { type: "ic12", size: 64, info: "32x32@2" },
                { type: "ic13", size: 256, info: "128x128@2" },
                { type: "ic14", size: 512, info: "256x256@2" }
            ];
            let outBuffer = Buffer.alloc(8, 0);
            outBuffer.write("icns", 0);
            for (let i = 0; i < icnsImages.length; i++) {
                logger.info("Creating Sub Image", [icnsImages[i].info]);
                outBuffer = yield this.appendChunk(sourceImage, outBuffer, icnsImages[i].type, icnsImages[i].size);
            }
            // Write total file size at offset 4 of output
            outBuffer.writeUInt32BE(outBuffer.length, 4);
            return outBuffer;
        });
    }
    appendChunk(sourceImage, outBuffer, type, size) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                const chunkImage = sourceImage.clone();
                chunkImage.resize(size, size);
                chunkImage.getBuffer(Jimp.MIME_PNG, (err, pngData) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        // Icon header, 'type' + (length of icon + icon header length)
                        const iconHeader = Buffer.alloc(8, 0);
                        iconHeader.write(type, 0);
                        iconHeader.writeUInt32BE(pngData.length + 8, 4);
                        resolve(Buffer.concat([outBuffer, iconHeader, pngData], outBuffer.length + iconHeader.length + pngData.length));
                    }
                });
            });
        });
    }
}
exports.ICNS = ICNS;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
